# frozen_string_literal: true

# This example is based on this question:
# https://stackoverflow.com/questions/51955217/import-data-from-csv-into-two-tables-in-rails

require 'spec_helper'
require 'csv'

# Set up Models
# =============

class Parent < ActiveRecord::Base
  has_many :children, dependent: :destroy

  # Generated by first running:  Parent.suggest_template(1, true)
  # And then just added :children_firstname to the uniques,
  # and the six column aliases in the :as portion.
  IMPORT_TEMPLATE = {
    uniques: [:firstname, :children_firstname],
    required: [],
    all: [:firstname, :lastname, :address,
      { children: [:firstname, :lastname, :dateofbirth] }],
    # An alias for each incoming column
    as: {
          'parent_1_firstname' => 'Firstname',
          'parent_1_lastname' => 'Lastname',
          'address' => 'Address',
          'childfirstname' => 'Children Firstname',
          'childlastname' => 'Children Lastname',
          'childdateofbirth' => 'Children Dateofbirth'
        }
  }.freeze

  def self.import(file)
    df_import(file)
  end
end

class Child < ActiveRecord::Base
  belongs_to :parent
end

# Examples
# ========

RSpec.describe Parent, type: :model do
  before(:each) do
    Parent.destroy_all
  end

  it 'should be able to import from CSV data' do
    csv = <<-CSV
parent_1_firstname,parent_1_lastname,address,childfirstname,childlastname,childdateofbirth
John,Wilson,68 Bell Road,Jessica,Wilson,2002-11-11
John,Wilson,68 Bell Road,Josh,Wilson,2006-10-01
      CSV
    child_info_csv = CSV.new(csv)

    # Import CSV data
    # ---------------
    expect { Parent.import(child_info_csv) }.not_to raise_error

    parents = Parent.order(:id).pluck(:firstname, :lastname, :address)
    expect(parents.count).to eq(1)
    expect(parents).to eq([['John', 'Wilson', '68 Bell Road']])

    children = Child.order(:id).pluck(:firstname, :lastname, :dateofbirth)
    expect(children.count).to eq(2)
    expect(children).to eq(
      [
        ['Jessica', 'Wilson', Date.new(2002, 11, 11)],
        ['Josh', 'Wilson', Date.new(2006, 10, 1)]
      ]
    )

    # Export current data to CSV
    # --------------------------
    # Using #df_export, an array is returned, which is easily converted back to CSV
    exported = CSV.generate(force_quotes: false) do |csv|
      Parent.df_export.each { |row| csv << row }
    end
    # The generated CSV exactly matches the original which we started with
    expect(exported).to eq(csv)
  end
end
