# frozen_string_literal: true

# This example is based on this question:
# https://stackoverflow.com/questions/51955217/import-data-from-csv-into-two-tables-in-rails

require 'spec_helper'
require 'csv'

# Set up Models
# =============

class Parent < ActiveRecord::Base
  has_many :children, dependent: :destroy

  # Generated by:  Parent.suggest_template(1, true)
  IMPORT_TEMPLATE = {
    uniques: [:firstname, :children_firstname],
    required: [],
    all: [:firstname, :lastname, :address,
      { children: [:firstname, :lastname, :dateofbirth] }],
    # An alias for each incoming column
    as: {
          'parent_1_firstname' => 'Firstname',
          'parent_1_lastname' => 'Lastname',
          'address' => 'Address',
          'childfirstname' => 'Children Firstname',
          'childlastname' => 'Children Lastname',
          'childdateofbirth' => 'Children Dateofbirth'
        }
  }.freeze

  def self.import(file)
    df_import(file)
  end
end

class Child < ActiveRecord::Base
  belongs_to :parent
end

# Parent Examples
# ===============

RSpec.describe Parent, type: :model do
  before(:each) do
    Parent.destroy_all
  end

  context 'with valid attributes' do
    it 'should be able to import from CSV data' do
      child_info_csv = CSV.new(
        <<-CSV
parent_1_firstname,parent_1_lastname,address,childfirstname,childlastname,childdateofbirth
John,Wilson,68 Bell Road,Jessica,Wilson,2002-11-11
John,Wilson,68 Bell Road,Josh,Wilson,2006-10-01
        CSV
      )

      # Perform the import on CSV data
      expect { Parent.import(child_info_csv) }.not_to raise_error

      parents = Parent.order(:id).pluck(:firstname, :lastname, :address)
      expect(parents.count).to eq(1)
      expect(parents).to eq([['John', 'Wilson', '68 Bell Road']])

      children = Child.order(:id).pluck(:firstname, :lastname, :dateofbirth)
      expect(children.count).to eq(2)
      expect(children).to eq(
        [
          ['Jessica', 'Wilson', Date.new(2002, 11, 11)],
          ['Josh', 'Wilson', Date.new(2006, 10, 1)]
        ]
      )
    end
  end
end
